# -*- coding: utf-8 -*-
"""DatasetNBA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a84NFvlGwsz4uFaGy1aULz0PaCswGhrY
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

"""#Times campeões da NBA
####*Miami Heat 2005/06*
####*Dallas Mavericks 2010/11*
####*Golden State Warriors 2014/15*
####*Cleveland Cavaliers 2015/16*
####*Los Angeles Lakers 2019/20*
"""

miami_2006_Temporada = pd.read_csv('/content/drive/MyDrive/P2_Estatística_grupo/miami_2006_Temporada.csv')

Dallas_2011_Temporada = pd.read_csv('/content/drive/MyDrive/P2_Estatística_grupo/Dallas_2011_Temporada.csv')

gsw_2015_Temporada = pd.read_csv('/content/drive/MyDrive/P2_Estatística_grupo/GSW_2015_Temporada.csv')

cavs_2016_temporada = pd.read_csv('/content/drive/MyDrive/P2_Estatística_grupo/Cleveland_2016_Temporada.csv')

lakers_2020_temporada = pd.read_csv('/content/drive/MyDrive/P2_Estatística_grupo/Lakers_2020_Temporada.csv')

"""##Grafico de Linhas Comparativo 'FG'

"""

# Plotando o gráfico de linhas com os valores de 'FG' de cada tabela
plt.figure(figsize=(10, 6))

# Plotando a linha para a Tabela
plt.plot(miami_2006_Temporada.index, miami_2006_Temporada['FG'], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.plot(Dallas_2011_Temporada.index, Dallas_2011_Temporada['FG'], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.plot(gsw_2015_Temporada.index, gsw_2015_Temporada['FG'], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.plot(cavs_2016_temporada.index, cavs_2016_temporada['FG'], label='Cavs', color='red', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.plot(lakers_2020_temporada.index, lakers_2020_temporada['FG'], label= 'Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)

# Adicionando título e rótulos
plt.title('Quantidade de "FG" ao Longo dos Jogos', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)

# Exibindo a legenda
plt.legend()

# Ajustando os rótulos do eixo X para melhorar a legibilidade
plt.xticks(rotation=45)

# Ajustar o layout e exibir o gráfico
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Dividir o número de jogos em 4 partes (aproximadamente iguais)
num_jogos = len(miami_2006_Temporada)

# Definindo as divisões
divisao1 = int(num_jogos / 4)
divisao2 = divisao1 * 2
divisao3 = divisao1 * 3

# Criar a figura com 4 subgráficos (2 linhas e 2 colunas)
fig, axs = plt.subplots(2, 2, figsize=(15, 10))

# Primeiro gráfico: primeira divisão de jogos
axs[0, 0].plot(miami_2006_Temporada.index[:divisao1], miami_2006_Temporada['FG'][:divisao1], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 0].plot(Dallas_2011_Temporada.index[:divisao1], Dallas_2011_Temporada['FG'][:divisao1], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 0].plot(gsw_2015_Temporada.index[:divisao1], gsw_2015_Temporada['FG'][:divisao1], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 0].plot(cavs_2016_temporada.index[:divisao1], cavs_2016_temporada['FG'][:divisao1], label='Cavs', color='Red', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 0].plot(lakers_2020_temporada.index[:divisao1], lakers_2020_temporada['FG'][:divisao1], label='Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 0].set_title('Quantidade de "FG" - 1ª Divisão de Jogos', fontsize=14)
axs[0, 0].set_xlabel('Nº de Jogos', fontsize=12)
axs[0, 0].set_ylabel('Número de Cestas', fontsize=12)
axs[0, 0].legend(fontsize=10)  # Ajustando o tamanho da legenda
axs[0, 0].tick_params(axis='x', rotation=45)
axs[0, 0].set_xticks(Dallas_2011_Temporada.index[:divisao1])  # Definindo apenas valores inteiros no eixo X

# Segundo gráfico: segunda divisão de jogos
axs[0, 1].plot(miami_2006_Temporada.index[divisao1:divisao2], miami_2006_Temporada['FG'][divisao1:divisao2], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 1].plot(Dallas_2011_Temporada.index[divisao1:divisao2], Dallas_2011_Temporada['FG'][divisao1:divisao2], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 1].plot(gsw_2015_Temporada.index[divisao1:divisao2], gsw_2015_Temporada['FG'][divisao1:divisao2], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 1].plot(cavs_2016_temporada.index[divisao1:divisao2], cavs_2016_temporada['FG'][divisao1:divisao2], label='Cavs', color='red', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 1].plot(lakers_2020_temporada.index[divisao1:divisao2], lakers_2020_temporada['FG'][divisao1:divisao2], label='Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[0, 1].set_title('Quantidade de "FG" - 2ª Divisão de Jogos', fontsize=14)
axs[0, 1].set_xlabel('Nº de Jogos', fontsize=12)
axs[0, 1].set_ylabel('Número de Cestas', fontsize=12)
axs[0, 1].legend(fontsize=10)  # Ajustando o tamanho da legenda
axs[0, 1].tick_params(axis='x', rotation=45)
axs[0, 1].set_xticks(Dallas_2011_Temporada.index[divisao1:divisao2])  # Definindo apenas valores inteiros no eixo X

# Terceiro gráfico: terceira divisão de jogos
axs[1, 0].plot(miami_2006_Temporada.index[divisao2:divisao3], miami_2006_Temporada['FG'][divisao2:divisao3], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 0].plot(Dallas_2011_Temporada.index[divisao2:divisao3], Dallas_2011_Temporada['FG'][divisao2:divisao3], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 0].plot(gsw_2015_Temporada.index[divisao2:divisao3], gsw_2015_Temporada['FG'][divisao2:divisao3], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 0].plot(cavs_2016_temporada.index[divisao2:divisao3], cavs_2016_temporada['FG'][divisao2:divisao3], label='Cavs', color='red', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 0].plot(lakers_2020_temporada.index[divisao2:divisao3], lakers_2020_temporada['FG'][divisao2:divisao3], label='Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 0].set_title('Quantidade de "FG" - 3ª Divisão de Jogos', fontsize=14)
axs[1, 0].set_xlabel('Nº de Jogos', fontsize=12)
axs[1, 0].set_ylabel('Número de Cestas', fontsize=12)
axs[1, 0].legend(fontsize=10)  # Ajustando o tamanho da legenda
axs[1, 0].tick_params(axis='x', rotation=45)
axs[1, 0].set_xticks(Dallas_2011_Temporada.index[divisao2:divisao3])  # Definindo apenas valores inteiros no eixo X

# Quarto gráfico: quarta divisão de jogos
axs[1, 1].plot(miami_2006_Temporada.index[divisao3:], miami_2006_Temporada['FG'][divisao3:], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 1].plot(Dallas_2011_Temporada.index[divisao3:], Dallas_2011_Temporada['FG'][divisao3:], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 1].plot(gsw_2015_Temporada.index[divisao3:], gsw_2015_Temporada['FG'][divisao3:], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 1].plot(cavs_2016_temporada.index[divisao3:], cavs_2016_temporada['FG'][divisao3:], label='Cavs', color='Red', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 1].plot(lakers_2020_temporada.index[divisao3:], lakers_2020_temporada['FG'][divisao3:], label='Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)
axs[1, 1].set_title('Quantidade de "FG" - 4ª Divisão de Jogos', fontsize=14)
axs[1, 1].set_xlabel('Nº de Jogos', fontsize=12)
axs[1, 1].set_ylabel('Número de Cestas', fontsize=12)
axs[1, 1].legend(fontsize=10)  # Ajustando o tamanho da legenda
axs[1, 1].tick_params(axis='x', rotation=45)
axs[1, 1].set_xticks(Dallas_2011_Temporada.index[divisao3:])  # Definindo apenas valores inteiros no eixo X

# Ajuste de espaçamento entre gráficos
plt.tight_layout()

# Exibir os gráficos
plt.show()

import matplotlib.pyplot as plt

# Plotando gráficos separados para cada tabela

# Gráfico para Miami (Tabela 1)
plt.figure(figsize=(10, 6))
plt.plot(miami_2006_Temporada.index, miami_2006_Temporada['FG'], label='Miami', color='#D93CAF', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.title('Quantidade de "FG" ao Longo dos Jogos (Miami)', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)
plt.legend()
plt.tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.savefig('grafico_miami.png')  # Salvar como PNG
plt.show()

# Gráfico para Dallas (Tabela 2)
plt.figure(figsize=(10, 6))
plt.plot(Dallas_2011_Temporada.index, Dallas_2011_Temporada['FG'], label='Dallas', color='blue', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.title('Quantidade de "FG" ao Longo dos Jogos (Dallas)', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)
plt.legend()
plt.tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.savefig('grafico_dallas.png')  # Salvar como PNG
plt.show()

# Gráfico para GSW (Tabela 3)
plt.figure(figsize=(10, 6))
plt.plot(gsw_2015_Temporada.index, gsw_2015_Temporada['FG'], label='GSW', color='#FDB927', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.title('Quantidade de "FG" ao Longo dos Jogos (Golden State Warriors)', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)
plt.legend()
plt.tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.savefig('grafico_gsw.png')  # Salvar como PNG
plt.show()

# Gráfico para Cavs (Tabela 4)
plt.figure(figsize=(10, 6))
plt.plot(cavs_2016_temporada.index, cavs_2016_temporada['FG'], label='Cavs', color='red', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.title('Quantidade de "FG" ao Longo dos Jogos (Cavs)', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)
plt.legend()
plt.tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.savefig('grafico_cavs.png')  # Salvar como PNG
plt.show()

# Gráfico para Lakers (Tabela 5)
plt.figure(figsize=(10, 6))
plt.plot(lakers_2020_temporada.index, lakers_2020_temporada['FG'], label='Lakers', color='purple', marker='o', linestyle='-', linewidth=2, markersize=6)
plt.title('Quantidade de "FG" ao Longo dos Jogos (Lakers)', fontsize=16)
plt.xlabel('Nº de Jogos', fontsize=12)
plt.ylabel('Número de Cestas', fontsize=12)
plt.legend()
plt.tick_params(axis='x', rotation=45)
plt.tight_layout()
plt.savefig('grafico_lakers.png')  # Salvar como PNG
plt.show()

"""
##Média, Moda e Mediana 'STL'
"""

# Calcular a média da coluna 'STL' em ambas as tabelas
media_Miami = miami_2006_Temporada['STL'].sum() / len(miami_2006_Temporada['STL'])
media_Dallas = Dallas_2011_Temporada['STL'].sum() / len(Dallas_2011_Temporada['STL'])
media_GSW = gsw_2015_Temporada['STL'].sum() / len(gsw_2015_Temporada['STL'])
media_CAVS = cavs_2016_temporada['STL'].sum() / len(cavs_2016_temporada['STL'])
media_Lakers = lakers_2020_temporada['STL'].sum() / len(lakers_2020_temporada['STL'])

# Calcular a moda da coluna 'STL' em ambas as tabelas
moda_Miami = miami_2006_Temporada['STL'].mode()[0]  # Moda pode ter mais de um valor, então pegamos o primeiro
moda_Dallas = Dallas_2011_Temporada['STL'].mode()[0]
moda_GSW = gsw_2015_Temporada['STL'].mode()[0]
moda_CAVS = cavs_2016_temporada['STL'].mode()[0]
moda_Lakers = lakers_2020_temporada['STL'].mode()[0]

# Calcular a mediana da coluna 'STL' em ambas as tabelas
mediana_Miami = miami_2006_Temporada['STL'].median()
mediana_Dallas = Dallas_2011_Temporada['STL'].median()
mediana_GSW = gsw_2015_Temporada['STL'].median()
mediana_CAVS = cavs_2016_temporada['STL'].median()
mediana_Lakers = lakers_2020_temporada['STL'].median()

# Exibir os resultados
print(f'Média de Miami: {media_Miami}')
print(f'Média de Dallas: {media_Dallas}')
print(f'Média de GSW: {media_GSW}')
print(f'Média de CAVS: {media_CAVS}')
print(f'Média de Lakers: {media_Lakers}')

print(f'Moda de Miami: {moda_Miami}')
print(f'Moda de Dallas: {moda_Dallas}')
print(f'Moda de GSW: {moda_GSW}')
print(f'Moda de CAVS: {moda_CAVS}')
print(f'Moda de Lakers: {moda_Lakers}')

print(f'Mediana de Miami: {mediana_Miami}')
print(f'Mediana de Dallas: {mediana_Dallas}')
print(f'Mediana de GSW: {mediana_GSW}')
print(f'Mediana de CAVS: {mediana_CAVS}')
print(f'Mediana de Lakers: {mediana_Lakers}')

# Criar uma lista com as médias, modas e medianas
medias = [media_Miami, media_Dallas, media_GSW, media_CAVS, media_Lakers]
modas = [moda_Miami, moda_Dallas, moda_GSW, moda_CAVS, moda_Lakers]
medianas = [mediana_Miami, mediana_Dallas, mediana_GSW, mediana_CAVS, mediana_Lakers]

nomes_tabelas = ['Miami', 'Dallas', 'GSW', 'Cavs', 'Lakers']

# Criar gráficos de barras para a Média, Moda e Mediana
def criar_grafico_com_valores(nome_grafico, valores, estatistica, cores):
    plt.figure(figsize=(8, 6))
    bars = plt.bar(nomes_tabelas, valores, color=cores)
    plt.title(f'{nome_grafico} de Roubadas de Bola - Total')
    plt.xlabel('')
    plt.ylabel(estatistica)

    # Adicionar os valores em cima de cada barra
    for bar in bars:
        yval = bar.get_height()  # Obtém a altura de cada barra (o valor da média/moda/mediana)
        plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom', fontsize=12)

    plt.tight_layout()
    plt.show()

# Cores para cada gráfico
cores = ['#D93CAF', '#00538C', '#FDB927', '#860038',  '#552583']

# Criar os gráficos
criar_grafico_com_valores('Média', medias, 'Média', cores)
criar_grafico_com_valores('Moda', modas, 'Moda', cores)
criar_grafico_com_valores('Mediana', medianas, 'Mediana', cores)

import matplotlib.pyplot as plt
import pandas as pd

# Calcular as estatísticas (certifique-se de que suas tabelas contêm a coluna 'STL')
media_Miami = miami_2006_Temporada['STL'].mean()
media_Dallas = Dallas_2011_Temporada['STL'].mean()
media_GSW = gsw_2015_Temporada['STL'].mean()
media_CAVS = cavs_2016_temporada['STL'].mean()
media_Lakers = lakers_2020_temporada['STL'].mean()

moda_Miami = miami_2006_Temporada['STL'].mode()[0]
moda_Dallas = Dallas_2011_Temporada['STL'].mode()[0]
moda_GSW = gsw_2015_Temporada['STL'].mode()[0]
moda_CAVS = cavs_2016_temporada['STL'].mode()[0]
moda_Lakers = lakers_2020_temporada['STL'].mode()[0]

mediana_Miami = miami_2006_Temporada['STL'].median()
mediana_Dallas = Dallas_2011_Temporada['STL'].median()
mediana_GSW = gsw_2015_Temporada['STL'].median()
mediana_CAVS = cavs_2016_temporada['STL'].median()
mediana_Lakers = lakers_2020_temporada['STL'].median()

# Listas de valores para cada estatística
medias = [media_Miami, media_Dallas, media_GSW, media_CAVS, media_Lakers]
modas = [moda_Miami, moda_Dallas, moda_GSW, moda_CAVS, moda_Lakers]
medianas = [mediana_Miami, mediana_Dallas, mediana_GSW, mediana_CAVS, mediana_Lakers]
nomes_tabelas = ['Miami', 'Dallas', 'GSW', 'Cavs', 'Lakers']

# Cores para os gráficos
cores = ['#D93CAF', '#00538C', '#FDB927', '#860038', '#552583']

# Função para criar gráficos de barras e exibi-los (separados)
def criar_grafico(nome_grafico, valores, estatistica, cores):
    plt.figure(figsize=(8, 6))
    bars = plt.bar(nomes_tabelas, valores, color=cores)
    plt.title(f'{nome_grafico} de Roubadas de Bola - Total')
    plt.xlabel('')
    plt.ylabel(estatistica)

    # Adicionar os valores em cima de cada barra
    for bar in bars:
        yval = bar.get_height()  # Obtém a altura de cada barra (o valor da média/moda/mediana)
        plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom', fontsize=12)

    plt.tight_layout()
    plt.show()  # Exibe o gráfico

# Gerar e exibir os gráficos para Média, Moda e Mediana separadamente
criar_grafico('Média', medias, 'Média', cores)
criar_grafico('Moda', modas, 'Moda', cores)
criar_grafico('Mediana', medianas, 'Mediana', cores)

"""##Comparação de Lançamento e Conversão '3P/3PA'"""

import pandas as pd
import matplotlib.pyplot as plt

# Contar a soma total de 3P e 3PA em cada DataFrame
total_3P_df1 = miami_2006_Temporada['3P'].sum()
total_3PA_df1 = miami_2006_Temporada['3PA'].sum()

total_3P_df2 = Dallas_2011_Temporada['3P'].sum()
total_3PA_df2 = Dallas_2011_Temporada['3PA'].sum()

total_3P_df3 = gsw_2015_Temporada['3P'].sum()
total_3PA_df3 = gsw_2015_Temporada['3PA'].sum()

total_3P_df4 = cavs_2016_temporada['3P'].sum()
total_3PA_df4 = cavs_2016_temporada['3PA'].sum()

total_3P_df5 = lakers_2020_temporada['3P'].sum()
total_3PA_df5 = lakers_2020_temporada['3PA'].sum()

# Criar um DataFrame para organizar a comparação
comparacao = pd.DataFrame({
    '3P': [total_3P_df1, total_3P_df2, total_3P_df3, total_3P_df4, total_3P_df5],
    '3PA': [total_3PA_df1, total_3PA_df2, total_3PA_df3, total_3PA_df4, total_3PA_df5]
}, index=['Miami', 'Dallas', 'GSW', 'Cavs', 'Lakers'])

# Inverter a ordem dos times no DataFrame
comparacao = comparacao.iloc[::-1]

# Gerar o gráfico de barras horizontal
ax = comparacao.plot(kind='barh', figsize=(10, 6), color=['blue', 'cyan'])

# Adicionar título e rótulos
plt.title('Tentativas de arremessos de 3 Pontos (3PA) e Conversões (3P)', fontsize=16)
plt.xlabel('Total de Arremessos', fontsize=12)
plt.ylabel('Times', fontsize=12)

# Exibir os valores abaixo das barras, um para cada categoria (3P e 3PA)
for i in range(len(comparacao)):
    # Exibir o valor de 3P abaixo da barra
    valor_3P = comparacao.iloc[i, 0]
    ax.text(valor_3P + 10, i - 0.45, str(int(valor_3P)), va='bottom', ha='right', fontsize=12, color='black')

    # Exibir o valor de 3PA abaixo da barra
    valor_3PA = comparacao.iloc[i, 1]
    ax.text(valor_3PA + 10, i - 0.2, str(int(valor_3PA)), va='bottom', ha='right', fontsize=12, color='black')

# Ajustar a posição do gráfico para dar mais espaço à direita
plt.subplots_adjust(right=0.85)

# Ajustar o layout e exibir o gráfico
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Contar a soma total de 3P e 3PA em cada DataFrame
total_3P_df1 = miami_2006_Temporada['3P'].sum()
total_3PA_df1 = miami_2006_Temporada['3PA'].sum()

total_3P_df2 = Dallas_2011_Temporada['3P'].sum()
total_3PA_df2 = Dallas_2011_Temporada['3PA'].sum()

total_3P_df3 = gsw_2015_Temporada['3P'].sum()
total_3PA_df3 = gsw_2015_Temporada['3PA'].sum()

total_3P_df4 = cavs_2016_temporada['3P'].sum()
total_3PA_df4 = cavs_2016_temporada['3PA'].sum()

total_3P_df5 = lakers_2020_temporada['3P'].sum()
total_3PA_df5 = lakers_2020_temporada['3PA'].sum()

# Calcular a média de aproveitamento em porcentagem para cada equipe
aproveitamento_df1 = (total_3P_df1 / total_3PA_df1) * 100 if total_3PA_df1 > 0 else 0
aproveitamento_df2 = (total_3P_df2 / total_3PA_df2) * 100 if total_3PA_df2 > 0 else 0
aproveitamento_df3 = (total_3P_df3 / total_3PA_df3) * 100 if total_3PA_df3 > 0 else 0
aproveitamento_df4 = (total_3P_df4 / total_3PA_df4) * 100 if total_3PA_df4 > 0 else 0
aproveitamento_df5 = (total_3P_df5 / total_3PA_df5) * 100 if total_3PA_df5 > 0 else 0

# Criar um DataFrame para organizar a comparação
comparacao = pd.DataFrame({
    'Aproveitamento (%)': [aproveitamento_df1, aproveitamento_df2, aproveitamento_df3, aproveitamento_df4, aproveitamento_df5]
}, index=['Miami', 'Dallas', 'GSW', 'Cavs', 'Lakers'])

# Inverter a ordem das linhas (times)
comparacao = comparacao.iloc[::-1]

# Definir as cores para cada time
cores = {
    'Miami': '#D93CAF',         # Rosa para Miami
    'Dallas': 'blue',        # Azul para Dallas
    'GSW': '#FDB927',         # Amarelo para GSW
    'Cavs': 'red',           # Vermelho para Cavs
    'Lakers': 'purple'       # Roxo para Lakers
}

# Gerar o gráfico de barras horizontal para o aproveitamento
fig, ax = plt.subplots(figsize=(10, 6))

# Plotar as barras com as cores personalizadas
comparacao['Aproveitamento (%)'].plot(kind='barh', ax=ax, color=[cores[team] for team in comparacao.index])

# Adicionar título e rótulos
ax.set_title('Aproveitamento de 3 Pontos (%)', fontsize=16)
ax.set_xlabel('Aproveitamento (%)', fontsize=12)
ax.set_ylabel('Times', fontsize=12)

# Exibir os valores de aproveitamento
for i in range(len(comparacao)):
    valor_aproveitamento = comparacao.iloc[i, 0]
    ax.text(valor_aproveitamento + 1, i, f'{valor_aproveitamento:.2f}%', va='center', ha='left', fontsize=12, color='black')

# Ajustar o layout e exibir o gráfico
plt.tight_layout()
plt.show()

"""##Rebotes e aproveitamento"""

import matplotlib.pyplot as plt
import pandas as pd

# Calcular a soma total de ORB, TRB e DRB para cada time
total_ORB_df1 = miami_2006_Temporada['ORB'].sum()
total_TRB_df1 = miami_2006_Temporada['TRB'].sum()
total_DRB_df1 = total_TRB_df1 - total_ORB_df1

total_ORB_df2 = Dallas_2011_Temporada['ORB'].sum()
total_TRB_df2 = Dallas_2011_Temporada['TRB'].sum()
total_DRB_df2 = total_TRB_df2 - total_ORB_df2

total_ORB_df3 = gsw_2015_Temporada['ORB'].sum()
total_TRB_df3 = gsw_2015_Temporada['TRB'].sum()
total_DRB_df3 = total_TRB_df3 - total_ORB_df3

total_ORB_df4 = cavs_2016_temporada['ORB'].sum()
total_TRB_df4 = cavs_2016_temporada['TRB'].sum()
total_DRB_df4 = total_TRB_df4 - total_ORB_df4

total_ORB_df5 = lakers_2020_temporada['ORB'].sum()
total_TRB_df5 = lakers_2020_temporada['TRB'].sum()
total_DRB_df5 = total_TRB_df5 - total_ORB_df5

# Criar um DataFrame para organizar a comparação dos rebotes
rebotes_comparacao = pd.DataFrame({
    'ORB': [total_ORB_df1, total_ORB_df2, total_ORB_df3, total_ORB_df4, total_ORB_df5],
    'DRB': [total_DRB_df1, total_DRB_df2, total_DRB_df3, total_DRB_df4, total_DRB_df5],
    'TRB': [total_TRB_df1, total_TRB_df2, total_TRB_df3, total_TRB_df4, total_TRB_df5]
}, index=['Miami', 'Dallas', 'GSW', 'Cavs', 'Lakers'])

# Reorganizar as colunas para que a ordem seja TRB, DRB, ORB
rebotes_comparacao = rebotes_comparacao[['TRB', 'DRB', 'ORB']]

# Inverter a ordem dos times
rebotes_comparacao = rebotes_comparacao[::-1]

# Gerar o gráfico de barras horizontal empilhadas
ax = rebotes_comparacao.plot(kind='barh', stacked=False, figsize=(12, 6), color=['lightcoral', 'lightgreen', 'lightblue'])

# Adicionar os valores à direita das barras
for p in ax.patches:
    width = p.get_width()  # Largura da barra (valor)
    x_pos = p.get_x() + width  # Ajustar para que o texto apareça à direita da barra
    y_pos = p.get_y() + p.get_height() / 2  # Posição vertical do texto (no meio da barra)
    ax.text(x_pos + 2, y_pos, f'{int(width)}', ha='left', va='center', fontsize=10, color='black')  # Deslocar para a direita

# Adicionar título e rótulos
plt.title('Rebotes Ofensivos (ORB), Rebotes Defensivos (DRB) e Rebotes Totais (TRB)', fontsize=16)
plt.xlabel('Total de Rebotes', fontsize=12)
plt.ylabel('Times', fontsize=12)

# Adicionar a legenda no canto inferior direito
plt.legend(loc='lower right', bbox_to_anchor=(1, 0), fontsize=10)

# Ajustar o layout e exibir o gráfico
plt.tight_layout()
plt.show()

# Lista dos DataFrames
dfs = [Dallas_2011_Temporada, san_2014_temporada, cavs_2016_temporada, gsw_2018_temporada, lakers_2020_temporada]
nomes_equipes = ['Equipe 1', 'Equipe 2', 'Equipe 3', 'Equipe 4', 'Equipe 5']

# Lista para armazenar as contagens de W e L para cada DataFrame
contagem_W = []
contagem_L = []

# Iterar sobre os DataFrames e contar as ocorrências de "W" e "L"
for df in dfs:
    contagem_w = df['W/L'].value_counts().get('W', 0)  # Conta "W" e assume 0 se não houver
    contagem_l = df['W/L'].value_counts().get('L', 0)  # Conta "L" e assume 0 se não houver
    contagem_W.append(contagem_w)
    contagem_L.append(contagem_l)

# Criar um DataFrame para as contagens de W e L
dados = pd.DataFrame({
    'Vitórias (W)': contagem_W,
    'Derrotas (L)': contagem_L
}, index=nomes_equipes)

# Plotar o gráfico de barras
ax = dados.plot(kind='bar', stacked=False, figsize=(10, 6), color=['blue', 'red'])

# Adicionar título e rótulos
plt.title('Contagem de Vitórias (W) e Derrotas (L) por Equipe', fontsize=16)
plt.xlabel('Equipes', fontsize=12)
plt.ylabel('Contagem', fontsize=12)

# Defina os deslocamentos para ajustar a altura dos rótulos
offset_W = 1  # Deslocamento para os totais de vitórias
offset_L = 1  # Deslocamento para os totais de derrotas

# Adicionar os totais acima das colunas
for idx, (w, l) in enumerate(zip(dados['Vitórias (W)'], dados['Derrotas (L)'])):
    ax.text(idx - 0.11, w + offset_W, str(w), ha='center', va='bottom', fontsize=10, color='black')  # Para W
    ax.text(idx + 0.12, l + offset_L, str(l), ha='center', va='bottom', fontsize=10, color='black')  # Para L

# Exibir o gráfico
plt.tight_layout()
plt.show()
